% %% Task 1: work on the videosurveillance sequence using a simple background obtained as an 
% % average between two empty frames
% 
% % load two empty images
% B1 = double(rgb2gray(imread('EmptyScene01.jpg')));
% B2 = double(rgb2gray(imread('EmptyScene02.jpg')));
% 
% % compute a simple background model
% B = 0.5*(B1 + B2);
% 
% % load each image in the sequence, perform the change detection
% % show the frame, the background and the binary map
% % Observe how the results change as you vary the threshold
% 
% tau = 20;
% 
% FIRST_IDX = 4728; %index of first image
% LAST_IDX = 6698; % index of last image
% 
% for t = FIRST_IDX : LAST_IDX
%     
%     filename = sprintf('frames_evento1/frame%4.4d.jpg', t);
%     It = imread(filename);
%     Ig = rgb2gray(It);
%     
%     Mt = (abs(double(Ig) - B) > tau);
% %     imshow(It);
%     imshow(uint8(Mt*255));
% %     subplot(1, 3, 1), imshow(It);
% %     subplot(1, 3, 2), imshow(uint8(B));
% %     subplot(1, 3, 3), imshow(uint8(Mt*255));
%     pause(0.05)
% 
% end

%% Task 2: working again on the videosurveillance sequence, use now a background model based 
% on running average to incorporate scene changes

% Let's use the first N  frames to initialize the background

% FIRST_IDX = 4728; %index of first image
% LAST_IDX = 6698; % index of last image
% 
% N = 5;
% 
% filename = sprintf('frames_evento1/frame%4.4d.jpg', FIRST_IDX);
% B = double(rgb2gray(imread(filename)));
% for t = FIRST_IDX+1 : FIRST_IDX + N-1
%     
%     filename = sprintf('frames_evento1/frame%4.4d.jpg', t);
%     B = B + double(rgb2gray(imread(filename)));
%     
% end
% 
% B = B / N;
% 
% % Play with these parameters
% TAU = 25; 
% ALPHA = 0.9;
% 
% % Now start the change detection while updating the background with the
% % running average. For that you have to set the values for TAU and ALPHA
% 
% Bprev = B;
% for t = FIRST_IDX+N : LAST_IDX
%     
%     filename = sprintf('frames_evento1/frame%4.4d.jpg', t);
%     
%     It = imread(filename);
%     Ig = rgb2gray(It);
%     
%     Mt = (abs(double(Ig) - Bprev) > TAU);
%     
%     % Implement the background update as a running average
%     % Bcurr = % ... FILL HERE ...
%     Bcurr = Bprev;
%     
% %     keyboard;
% %     imshow(It);
% %     imshow(uint8(Bcurr));
%     imshow(uint8(Mt*255));
% %     subplot(1, 3, 1), imshow(It);
% %     subplot(1, 3, 2), imshow(uint8(Bcurr));
% %     subplot(1, 3, 3), imshow(uint8(Mt*255));
% %     pause(0.1)
%     Bprev = Bcurr;
%     
% end


%% Task 3: Repeat the above experiment with the sequence frames_evento1 observing what happens as you change 
% the parameters TAU and ALPHA

% 
% FIRST_IDX = 4728; %index of first image
% LAST_IDX = 6698; % index of last image
% 
% N = 5;
% 
% filename = sprintf('frames_evento1/frame%4.4d.jpg', FIRST_IDX);
% B = double(rgb2gray(imread(filename)));
% for t = FIRST_IDX+1 : FIRST_IDX + N-1
%     
%     filename = sprintf('frames_evento1/frame%4.4d.jpg', t);
%     B = B + double(rgb2gray(imread(filename)));
%     
% end
% 
% B = B / N;
% 
% % Play with these parameters
% TAU = 100; 
% ALPHA = 0.5;
% 
% % Now start the change detection while updating the background with the
% % running average. For that you have to set the values for TAU and ALPHA
% 
% Bprev = B;
% for t = FIRST_IDX+N : LAST_IDX
%     
%     filename = sprintf('frames_evento1/frame%4.4d.jpg', t);
%     
%     It = imread(filename);
%     Ig = rgb2gray(It);
%     
%     Mt = (abs(double(Ig) - Bprev) > TAU);
%     
%     % Implement the background update as a running average
%     %Bcurr = % ... FILL HERE ...
%     Bcurr = Bprev;
% %     keyboard
% %     imshow(It);
%     subplot(1, 3, 1), imshow(It);
%     subplot(1, 3, 2), imshow(uint8(Bcurr));
%     subplot(1, 3, 3), imshow(uint8(Mt*255));
% %     pause(0.1)
%     Bprev = Bcurr;
%     
% end

%% Task 4: Design a simple tracking system according to the following guidelines
% a. Initialize the background model 
% b. Initialize the tracking history to empty
% b. At each time instant
%       i. Apply the change detection to obtain the binary map
%      ii. Update the background model
%     iii. Identify the connected components in the binary map (see e.g.
%          the matlab function bwconncomp)
%      iv. Try to associate each connected component with a previously seen
%          target
% Hint 1 - It would be good to keep track of the entire trajectory and produce a visualization 
% that can be done either frame by frame (so you should see the trajectory built
% incrementally) or only at the end (in this case you will see the entire final trajectory)
% Hint 2 - How to decide that a trajectory is closed?


FIRST_IDX = 4728; %index of first image
LAST_IDX = 6698; % index of last image

N = 5;

filename = sprintf('frames_evento1/frame%4.4d.jpg', FIRST_IDX);
B = double(rgb2gray(imread(filename)));
for t = FIRST_IDX+1 : FIRST_IDX + N-1
    
    filename = sprintf('frames_evento1/frame%4.4d.jpg', t);
    B = B + double(rgb2gray(imread(filename)));
    
end

B = B / N;

% Play with these parameters
TAU = 25; 
ALPHA = 5;

% Now start the change detection while updating the background with the
% running average. For that you have to set the values for TAU and ALPHA

Bprev = B;
for t = FIRST_IDX+N : LAST_IDX
    
    filename = sprintf('frames_evento1/frame%4.4d.jpg', t);
    
    It = imread(filename);
    Ig = rgb2gray(It);
    
    Mt = (abs(double(Ig) - Bprev) > TAU);
    
    % Implement the background update as a running average
    %Bcurr = % ... FILL HERE ...
%     Bcurr = Bprev;

    for i = size(Mt, 1)
        for j = size(Mt, 2)
            if Mt(i, j) == 1
                Bcurr(i, j) = Bprev(i, j);
            else
                Bcurr(i, j) = (1-ALPHA)*Bprev(i, j) + ALPHA*double(Ig(i, j));
            end
        end
    end
    
    Bcurr = bwconncomp(BW)
%     keyboard
%     imshow(It);
    imshow(uint8(Mt*255));
%     subplot(1, 3, 1), imshow(It);
%     subplot(1, 3, 2), imshow(uint8(Bcurr));
%     subplot(1, 3, 3), imshow(uint8(Mt*255));
%     pause(0.1)
    Bprev = Bcurr;
    
end